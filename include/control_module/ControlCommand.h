// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ControlCommand.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_INTERFACES_PKG_MSG_DDS__CONTROLCOMMAND_H_
#define _FAST_DDS_GENERATED_INTERFACES_PKG_MSG_DDS__CONTROLCOMMAND_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CONTROLCOMMAND_SOURCE)
#define CONTROLCOMMAND_DllAPI __declspec( dllexport )
#else
#define CONTROLCOMMAND_DllAPI __declspec( dllimport )
#endif // CONTROLCOMMAND_SOURCE
#else
#define CONTROLCOMMAND_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CONTROLCOMMAND_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima



namespace interfaces_pkg {

namespace msg {

namespace dds_ {



/*!
 * @brief This class represents the structure MotionCommand_ defined by the user in the IDL file.
 * @ingroup ControlCommand
 */
class MotionCommand_
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MotionCommand_();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MotionCommand_();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object interfaces_pkg::msg::dds_::MotionCommand_ that will be copied.
     */
    eProsima_user_DllExport MotionCommand_(
            const MotionCommand_& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object interfaces_pkg::msg::dds_::MotionCommand_ that will be copied.
     */
    eProsima_user_DllExport MotionCommand_(
            MotionCommand_&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object interfaces_pkg::msg::dds_::MotionCommand_ that will be copied.
     */
    eProsima_user_DllExport MotionCommand_& operator =(
            const MotionCommand_& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object interfaces_pkg::msg::dds_::MotionCommand_ that will be copied.
     */
    eProsima_user_DllExport MotionCommand_& operator =(
            MotionCommand_&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x interfaces_pkg::msg::dds_::MotionCommand_ object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MotionCommand_& x) const;

    /*!
     * @brief Comparison operator.
     * @param x interfaces_pkg::msg::dds_::MotionCommand_ object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MotionCommand_& x) const;

    /*!
     * @brief This function sets a value in member steering
     * @param _steering New value for member steering
     */
    eProsima_user_DllExport void steering(
            int32_t _steering);

    /*!
     * @brief This function returns the value of member steering
     * @return Value of member steering
     */
    eProsima_user_DllExport int32_t steering() const;

    /*!
     * @brief This function returns a reference to member steering
     * @return Reference to member steering
     */
    eProsima_user_DllExport int32_t& steering();


    /*!
     * @brief This function sets a value in member left_speed
     * @param _left_speed New value for member left_speed
     */
    eProsima_user_DllExport void left_speed(
            int32_t _left_speed);

    /*!
     * @brief This function returns the value of member left_speed
     * @return Value of member left_speed
     */
    eProsima_user_DllExport int32_t left_speed() const;

    /*!
     * @brief This function returns a reference to member left_speed
     * @return Reference to member left_speed
     */
    eProsima_user_DllExport int32_t& left_speed();


    /*!
     * @brief This function sets a value in member right_speed
     * @param _right_speed New value for member right_speed
     */
    eProsima_user_DllExport void right_speed(
            int32_t _right_speed);

    /*!
     * @brief This function returns the value of member right_speed
     * @return Value of member right_speed
     */
    eProsima_user_DllExport int32_t right_speed() const;

    /*!
     * @brief This function returns a reference to member right_speed
     * @return Reference to member right_speed
     */
    eProsima_user_DllExport int32_t& right_speed();

private:

    int32_t m_steering{0};
    int32_t m_left_speed{0};
    int32_t m_right_speed{0};

};

} // namespace dds_

} // namespace msg

} // namespace interfaces_pkg

#endif // _FAST_DDS_GENERATED_INTERFACES_PKG_MSG_DDS__CONTROLCOMMAND_H_



