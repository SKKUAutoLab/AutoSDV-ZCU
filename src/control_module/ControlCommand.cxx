// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ControlCommand.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ControlCommand.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace interfaces_pkg {

namespace msg {

namespace dds_ {



MotionCommand_::MotionCommand_()
{
}

MotionCommand_::~MotionCommand_()
{
}

MotionCommand_::MotionCommand_(
        const MotionCommand_& x)
{
    m_steering = x.m_steering;
    m_left_speed = x.m_left_speed;
    m_right_speed = x.m_right_speed;
}

MotionCommand_::MotionCommand_(
        MotionCommand_&& x) noexcept
{
    m_steering = x.m_steering;
    m_left_speed = x.m_left_speed;
    m_right_speed = x.m_right_speed;
}

MotionCommand_& MotionCommand_::operator =(
        const MotionCommand_& x)
{

    m_steering = x.m_steering;
    m_left_speed = x.m_left_speed;
    m_right_speed = x.m_right_speed;
    return *this;
}

MotionCommand_& MotionCommand_::operator =(
        MotionCommand_&& x) noexcept
{

    m_steering = x.m_steering;
    m_left_speed = x.m_left_speed;
    m_right_speed = x.m_right_speed;
    return *this;
}

bool MotionCommand_::operator ==(
        const MotionCommand_& x) const
{
    return (m_steering == x.m_steering &&
           m_left_speed == x.m_left_speed &&
           m_right_speed == x.m_right_speed);
}

bool MotionCommand_::operator !=(
        const MotionCommand_& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member steering
 * @param _steering New value for member steering
 */
void MotionCommand_::steering(
        int32_t _steering)
{
    m_steering = _steering;
}

/*!
 * @brief This function returns the value of member steering
 * @return Value of member steering
 */
int32_t MotionCommand_::steering() const
{
    return m_steering;
}

/*!
 * @brief This function returns a reference to member steering
 * @return Reference to member steering
 */
int32_t& MotionCommand_::steering()
{
    return m_steering;
}


/*!
 * @brief This function sets a value in member left_speed
 * @param _left_speed New value for member left_speed
 */
void MotionCommand_::left_speed(
        int32_t _left_speed)
{
    m_left_speed = _left_speed;
}

/*!
 * @brief This function returns the value of member left_speed
 * @return Value of member left_speed
 */
int32_t MotionCommand_::left_speed() const
{
    return m_left_speed;
}

/*!
 * @brief This function returns a reference to member left_speed
 * @return Reference to member left_speed
 */
int32_t& MotionCommand_::left_speed()
{
    return m_left_speed;
}


/*!
 * @brief This function sets a value in member right_speed
 * @param _right_speed New value for member right_speed
 */
void MotionCommand_::right_speed(
        int32_t _right_speed)
{
    m_right_speed = _right_speed;
}

/*!
 * @brief This function returns the value of member right_speed
 * @return Value of member right_speed
 */
int32_t MotionCommand_::right_speed() const
{
    return m_right_speed;
}

/*!
 * @brief This function returns a reference to member right_speed
 * @return Reference to member right_speed
 */
int32_t& MotionCommand_::right_speed()
{
    return m_right_speed;
}




} // namespace dds_


} // namespace msg


} // namespace interfaces_pkg
// Include auxiliary functions like for serializing/deserializing.
#include "ControlCommandCdrAux.ipp"

