// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Image.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Image.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace builtin_interfaces {

namespace msg {

namespace dds_ {



Time_::Time_()
{
}

Time_::~Time_()
{
}

Time_::Time_(
        const Time_& x)
{
    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
}

Time_::Time_(
        Time_&& x) noexcept
{
    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
}

Time_& Time_::operator =(
        const Time_& x)
{

    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
    return *this;
}

Time_& Time_::operator =(
        Time_&& x) noexcept
{

    m_sec = x.m_sec;
    m_nanosec = x.m_nanosec;
    return *this;
}

bool Time_::operator ==(
        const Time_& x) const
{
    return (m_sec == x.m_sec &&
           m_nanosec == x.m_nanosec);
}

bool Time_::operator !=(
        const Time_& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member sec
 * @param _sec New value for member sec
 */
void Time_::sec(
        int32_t _sec)
{
    m_sec = _sec;
}

/*!
 * @brief This function returns the value of member sec
 * @return Value of member sec
 */
int32_t Time_::sec() const
{
    return m_sec;
}

/*!
 * @brief This function returns a reference to member sec
 * @return Reference to member sec
 */
int32_t& Time_::sec()
{
    return m_sec;
}


/*!
 * @brief This function sets a value in member nanosec
 * @param _nanosec New value for member nanosec
 */
void Time_::nanosec(
        uint32_t _nanosec)
{
    m_nanosec = _nanosec;
}

/*!
 * @brief This function returns the value of member nanosec
 * @return Value of member nanosec
 */
uint32_t Time_::nanosec() const
{
    return m_nanosec;
}

/*!
 * @brief This function returns a reference to member nanosec
 * @return Reference to member nanosec
 */
uint32_t& Time_::nanosec()
{
    return m_nanosec;
}




} // namespace dds_


} // namespace msg


} // namespace builtin_interfaces
namespace std_msgs {

namespace msg {

namespace dds_ {



Header_::Header_()
{
}

Header_::~Header_()
{
}

Header_::Header_(
        const Header_& x)
{
    m_stamp = x.m_stamp;
    m_frame_id = x.m_frame_id;
}

Header_::Header_(
        Header_&& x) noexcept
{
    m_stamp = std::move(x.m_stamp);
    m_frame_id = std::move(x.m_frame_id);
}

Header_& Header_::operator =(
        const Header_& x)
{

    m_stamp = x.m_stamp;
    m_frame_id = x.m_frame_id;
    return *this;
}

Header_& Header_::operator =(
        Header_&& x) noexcept
{

    m_stamp = std::move(x.m_stamp);
    m_frame_id = std::move(x.m_frame_id);
    return *this;
}

bool Header_::operator ==(
        const Header_& x) const
{
    return (m_stamp == x.m_stamp &&
           m_frame_id == x.m_frame_id);
}

bool Header_::operator !=(
        const Header_& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member stamp
 * @param _stamp New value to be copied in member stamp
 */
void Header_::stamp(
        const builtin_interfaces::msg::dds_::Time_& _stamp)
{
    m_stamp = _stamp;
}

/*!
 * @brief This function moves the value in member stamp
 * @param _stamp New value to be moved in member stamp
 */
void Header_::stamp(
        builtin_interfaces::msg::dds_::Time_&& _stamp)
{
    m_stamp = std::move(_stamp);
}

/*!
 * @brief This function returns a constant reference to member stamp
 * @return Constant reference to member stamp
 */
const builtin_interfaces::msg::dds_::Time_& Header_::stamp() const
{
    return m_stamp;
}

/*!
 * @brief This function returns a reference to member stamp
 * @return Reference to member stamp
 */
builtin_interfaces::msg::dds_::Time_& Header_::stamp()
{
    return m_stamp;
}


/*!
 * @brief This function copies the value in member frame_id
 * @param _frame_id New value to be copied in member frame_id
 */
void Header_::frame_id(
        const std::string& _frame_id)
{
    m_frame_id = _frame_id;
}

/*!
 * @brief This function moves the value in member frame_id
 * @param _frame_id New value to be moved in member frame_id
 */
void Header_::frame_id(
        std::string&& _frame_id)
{
    m_frame_id = std::move(_frame_id);
}

/*!
 * @brief This function returns a constant reference to member frame_id
 * @return Constant reference to member frame_id
 */
const std::string& Header_::frame_id() const
{
    return m_frame_id;
}

/*!
 * @brief This function returns a reference to member frame_id
 * @return Reference to member frame_id
 */
std::string& Header_::frame_id()
{
    return m_frame_id;
}




} // namespace dds_


} // namespace msg


} // namespace std_msgs
namespace sensor_msgs {

namespace msg {

namespace dds_ {





Image_::Image_()
{
}

Image_::~Image_()
{
}

Image_::Image_(
        const Image_& x)
{
    m_header = x.m_header;
    m_height = x.m_height;
    m_width = x.m_width;
    m_encoding = x.m_encoding;
    m_is_bigendian = x.m_is_bigendian;
    m_step = x.m_step;
    m_data = x.m_data;
}

Image_::Image_(
        Image_&& x) noexcept
{
    m_header = std::move(x.m_header);
    m_height = x.m_height;
    m_width = x.m_width;
    m_encoding = std::move(x.m_encoding);
    m_is_bigendian = x.m_is_bigendian;
    m_step = x.m_step;
    m_data = std::move(x.m_data);
}

Image_& Image_::operator =(
        const Image_& x)
{

    m_header = x.m_header;
    m_height = x.m_height;
    m_width = x.m_width;
    m_encoding = x.m_encoding;
    m_is_bigendian = x.m_is_bigendian;
    m_step = x.m_step;
    m_data = x.m_data;
    return *this;
}

Image_& Image_::operator =(
        Image_&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_height = x.m_height;
    m_width = x.m_width;
    m_encoding = std::move(x.m_encoding);
    m_is_bigendian = x.m_is_bigendian;
    m_step = x.m_step;
    m_data = std::move(x.m_data);
    return *this;
}

bool Image_::operator ==(
        const Image_& x) const
{
    return (m_header == x.m_header &&
           m_height == x.m_height &&
           m_width == x.m_width &&
           m_encoding == x.m_encoding &&
           m_is_bigendian == x.m_is_bigendian &&
           m_step == x.m_step &&
           m_data == x.m_data);
}

bool Image_::operator !=(
        const Image_& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void Image_::header(
        const std_msgs::msg::dds_::Header_& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void Image_::header(
        std_msgs::msg::dds_::Header_&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::dds_::Header_& Image_::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::dds_::Header_& Image_::header()
{
    return m_header;
}


/*!
 * @brief This function sets a value in member height
 * @param _height New value for member height
 */
void Image_::height(
        uint32_t _height)
{
    m_height = _height;
}

/*!
 * @brief This function returns the value of member height
 * @return Value of member height
 */
uint32_t Image_::height() const
{
    return m_height;
}

/*!
 * @brief This function returns a reference to member height
 * @return Reference to member height
 */
uint32_t& Image_::height()
{
    return m_height;
}


/*!
 * @brief This function sets a value in member width
 * @param _width New value for member width
 */
void Image_::width(
        uint32_t _width)
{
    m_width = _width;
}

/*!
 * @brief This function returns the value of member width
 * @return Value of member width
 */
uint32_t Image_::width() const
{
    return m_width;
}

/*!
 * @brief This function returns a reference to member width
 * @return Reference to member width
 */
uint32_t& Image_::width()
{
    return m_width;
}


/*!
 * @brief This function copies the value in member encoding
 * @param _encoding New value to be copied in member encoding
 */
void Image_::encoding(
        const std::string& _encoding)
{
    m_encoding = _encoding;
}

/*!
 * @brief This function moves the value in member encoding
 * @param _encoding New value to be moved in member encoding
 */
void Image_::encoding(
        std::string&& _encoding)
{
    m_encoding = std::move(_encoding);
}

/*!
 * @brief This function returns a constant reference to member encoding
 * @return Constant reference to member encoding
 */
const std::string& Image_::encoding() const
{
    return m_encoding;
}

/*!
 * @brief This function returns a reference to member encoding
 * @return Reference to member encoding
 */
std::string& Image_::encoding()
{
    return m_encoding;
}


/*!
 * @brief This function sets a value in member is_bigendian
 * @param _is_bigendian New value for member is_bigendian
 */
void Image_::is_bigendian(
        uint8_t _is_bigendian)
{
    m_is_bigendian = _is_bigendian;
}

/*!
 * @brief This function returns the value of member is_bigendian
 * @return Value of member is_bigendian
 */
uint8_t Image_::is_bigendian() const
{
    return m_is_bigendian;
}

/*!
 * @brief This function returns a reference to member is_bigendian
 * @return Reference to member is_bigendian
 */
uint8_t& Image_::is_bigendian()
{
    return m_is_bigendian;
}


/*!
 * @brief This function sets a value in member step
 * @param _step New value for member step
 */
void Image_::step(
        uint32_t _step)
{
    m_step = _step;
}

/*!
 * @brief This function returns the value of member step
 * @return Value of member step
 */
uint32_t Image_::step() const
{
    return m_step;
}

/*!
 * @brief This function returns a reference to member step
 * @return Reference to member step
 */
uint32_t& Image_::step()
{
    return m_step;
}


/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void Image_::data(
        const std::vector<uint8_t>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void Image_::data(
        std::vector<uint8_t>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::vector<uint8_t>& Image_::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::vector<uint8_t>& Image_::data()
{
    return m_data;
}




} // namespace dds_


} // namespace msg


} // namespace sensor_msgs
// Include auxiliary functions like for serializing/deserializing.
#include "ImageCdrAux.ipp"

